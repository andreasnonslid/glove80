
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Symbols 1
#define LAYER_Macros 2
#define LAYER_Unused 3
#define LAYER_Gaming 4
#define LAYER_Arrows 5
#define LAYER_International 6
#define LAYER_Magic 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #define OPERATING_SYSTEM 'W'

    #define _C      LC
    #define _A_TAB  LALT
    #define _G_TAB  LGUI
    #define _REDO   _C(Y)
    #define _POWER  C_POWER
    #define _W      _C
    #define _HOME   HOME
    #define _END    END


#define _SLEEP      C_SLEEP


    #define _LOCK   LG(L)
#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))


#undef  AMPS
#define AMPS  LS(N7)
#undef  AT
#define AT    LS(N2)
#undef  CARET
#define CARET LS(N6)
#undef  COLON
#define COLON LS(SEMI)
#undef  DLLR
#define DLLR  LS(N4)
#undef  DQT
#define DQT   LS(SQT)
#undef  EXCL
#define EXCL  LS(N1)
#undef  GT
#define GT    LS(DOT)
#undef  HASH
#define HASH  LS(N3)
#undef  LBRC
#define LBRC  LS(LBKT)
#undef  LPAR
#define LPAR  LS(N9)
#undef  LT
#define LT    LS(COMMA)
#undef  PIPE
#define PIPE  LS(BSLH)
#undef  PLUS
#define PLUS  LS(EQUAL)
#undef  PRCNT
#define PRCNT LS(N5)
#undef  QMARK
#define QMARK LS(FSLH)
#undef  RBRC
#define RBRC  LS(RBKT)
#undef  RPAR
#define RPAR  LS(N0)
#undef  STAR
#define STAR  LS(N8)
#undef  TILDE
#define TILDE LS(GRAVE)
#undef  UNDER
#define UNDER LS(MINUS)

behaviors{
mymt_keybind: my_modtap_keybind{
    compatible = "zmk,behavior-hold-tap";
    flavor = "tap-preferred";
    tapping-term-ms = <300>;
    require-prior-idle-ms = <150>;
    #binding-cells = <2>;
    bindings = <&kp>, <&kp>;
};
#define mymt(hold,tap) mymt_keybind hold tap

mymomt: my_layer_modtap_keybind{
    compatible = "zmk,behavior-hold-tap";
    flavor = "tap-preferred";
    tapping-term-ms = <300>;
    require-prior-idle-ms = <150>;
    #binding-cells = <2>;
    bindings = <&mo>, <&kp>;
};
// #define mymomt(hold,tap) mymomt_keybind hold tap

    //////////////////////////////////////////////////////////////////////////
    //
    // World layer - international characters
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // UNICODE_TARGET_OS defines which operating system you're targeting
    // for the UNICODE() preprocessor macro to be used on, since each OS
    // has different shortcuts for typing Unicode characters as hexcodes.
    //
    // NOTE: You may need to enable Unicode hexadecimal input in your OS:
    // - (macOS) https://sevenseacat.net/posts/2018/unicode-in-qmk-on-osx/
    // - (Linux) https://help.ubuntu.com/stable/ubuntu-help/tips-specialchars.html.en#ctrlshiftu
    // - (Windows) https://github.com/samhocevar/wincompose
    //
    // Specifically, Windows users should be running the WinCompose tool,
    // which lets you type Unicode characters via hexadecimal codepoints.
    //
    #ifndef UNICODE_TARGET_OS
    #define UNICODE_TARGET_OS OPERATING_SYSTEM
    #endif

    //
    // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
    // between keystrokes while inputting the Unicode codepoint shortcut.
    //
    #ifndef UNICODE_TAP_DELAY
    #define UNICODE_TAP_DELAY 1
    #endif

    //
    // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
    // between emitting Unicode codepoints in multi-codepoint characters.
    //
    #ifndef UNICODE_SEQ_DELAY
    #define UNICODE_SEQ_DELAY 10
    #endif

    #define UNICODE(name, ...) \
        ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
        )

    //
    // UNICODE_SEQ_LINUX() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under Linux.
    //
    #ifndef UNICODE_SEQ_LINUX
    #define UNICODE_SEQ_LINUX(keystrokes) \
        <&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
    #endif

    //
    // UNICODE_SEQ_MACOS() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under macOS.
    //
    #ifndef UNICODE_SEQ_MACOS
    #define UNICODE_SEQ_MACOS(keystrokes) \
        <&macro_press &kp LALT> ,\
        <&macro_tap keystrokes> ,\
        <&macro_release &kp LALT>
    #endif

    //
    // UNICODE_SEQ_WINDOWS() specifies how Unicode hexadecimal codepoint
    // keystrokes are transformed into Unicode characters under Windows.
    //
    // If you've configured WinCompose to use a different trigger hotkey,
    // such as F13 instead of the default RA(U) shortcut, simply override
    // this definition to adapt all UNICODE() function calls accordingly.
    //
    #ifndef UNICODE_SEQ_WINDOWS
    #define UNICODE_SEQ_WINDOWS(keystrokes) \
        <&macro_tap &kp RA(U) keystrokes &kp ENTER>
    #endif

    //
    // COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
    // which may be RALT by default but can be reconfigured as follows:
    //
    // $ setxkbmap -option compose:sclk # use ScrollLock as Compose key
    //
    // See xkeyboard-config(7) for possible choices for the Compose key:
    // https://manpages.debian.org/stable/xkb-data/xkeyboard-config.7.en.html#Position_of_Compose_key
    //
    #ifndef COMPOSE_KEY_LINUX
    #define COMPOSE_KEY_LINUX RALT
    #endif

    //
    // COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
    //
    #ifndef COMPOSE_SEQ_LINUX
    #define COMPOSE_SEQ_LINUX(keystrokes) \
        <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
    #endif

    //
    // COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
    //
    #ifndef COMPOSE_SEQ_MACOS
    #define COMPOSE_SEQ_MACOS(keystrokes) \
        <&macro_tap keystrokes>
    #endif

    //
    // COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
    //
    #ifndef COMPOSE_SEQ_WINDOWS
    #define COMPOSE_SEQ_WINDOWS(keystrokes) \
        <&macro_press &kp LALT>, \
        <&macro_tap keystrokes>, \
        <&macro_release &kp LALT>
    #endif

    //
    // NOTE: edit the world.yaml file and run `rake` to generate this:
    //

    //
    // codepoints
    //
    UNICODE(world_degree_sign, /* ° */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp N0)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N0)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp N0)
      #endif
    )
    UNICODE(world_section_sign, /* § */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N7)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N7)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N7)
      #endif
    )
    UNICODE(world_paragraph_sign, /* ¶ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp N6)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N6)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp N6)
      #endif
    )
    UNICODE(world_o_ordinal, /* º */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp A)
      #endif
    )
    UNICODE(world_a_ordinal, /* ª */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp A)
      #endif
    )
    UNICODE(world_exclaim_left, /* ¡ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N1)
      #endif
    )
    UNICODE(world_question_left, /* ¿ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp F)
      #endif
    )
    UNICODE(world_currency_crypto, /* ₿ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp B &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp B &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp B &kp F)
      #endif
    )
    UNICODE(world_currency_cent, /* ¢ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N2)
      #endif
    )
    UNICODE(world_currency_sign, /* ¤ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N4)
      #endif
    )

    //
    // characters
    //
    UNICODE(world_c_cedilla_lower, /* ç */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(C))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
      #endif
    )
    UNICODE(world_c_cedilla_upper, /* Ç */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
      #endif
    )
    world_c_cedilla: world_c_cedilla {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_c_cedilla_lower>, <&world_c_cedilla_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_acute_lower, /* í */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp SQT &kp I)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
      #endif
    )
    UNICODE(world_i_acute_upper, /* Í */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
      #endif
    )
    world_i_acute: world_i_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_diaeresis_lower, /* ï */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp F)
      #endif
    )
    UNICODE(world_i_diaeresis_upper, /* Ï */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp F)
      #endif
    )
    world_i_diaeresis: world_i_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_circumflex_lower, /* î */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp E)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp E)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp E)
      #endif
    )
    UNICODE(world_i_circumflex_upper, /* Î */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp E)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp E)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp E)
      #endif
    )
    world_i_circumflex: world_i_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_grave_lower, /* ì */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp C)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp C)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp C)
      #endif
    )
    UNICODE(world_i_grave_upper, /* Ì */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp C)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp C)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp C)
      #endif
    )
    world_i_grave: world_i_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_acute_lower, /* é */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N9)
      #endif
    )
    UNICODE(world_e_acute_upper, /* É */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N9)
      #endif
    )
    world_e_acute: world_e_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_diaeresis_lower, /* ë */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp B)
      #endif
    )
    UNICODE(world_e_diaeresis_upper, /* Ë */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp B)
      #endif
    )
    world_e_diaeresis: world_e_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_circumflex_lower, /* ê */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp A)
      #endif
    )
    UNICODE(world_e_circumflex_upper, /* Ê */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp A)
      #endif
    )
    world_e_circumflex: world_e_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_grave_lower, /* è */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N8)
      #endif
    )
    UNICODE(world_e_grave_upper, /* È */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N8)
      #endif
    )
    world_e_grave: world_e_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_ae_lower, /* æ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N6)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N6)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_2 &kp KP_3)
      #endif
    )
    UNICODE(world_e_ae_upper, /* Æ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N6)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N6)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_1 &kp KP_9)
      #endif
    )
    world_e_ae: world_e_ae {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_acute_lower, /* á */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N1)
      #endif
    )
    UNICODE(world_a_acute_upper, /* Á */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N1)
      #endif
    )
    world_a_acute: world_a_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_diaeresis_lower, /* ä */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
      #endif
    )
    UNICODE(world_a_diaeresis_upper, /* Ä */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
      #endif
    )
    world_a_diaeresis: world_a_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_circumflex_lower, /* â */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N2)
      #endif
    )
    UNICODE(world_a_circumflex_upper, /* Â */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N2)
      #endif
    )
    world_a_circumflex: world_a_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_grave_lower, /* à */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N0)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N0)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N0)
      #endif
    )
    UNICODE(world_a_grave_upper, /* À */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N0)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N0)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N0)
      #endif
    )
    world_a_grave: world_a_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_tilde_lower, /* ã */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp E &kp N3)
      #endif
    )
    UNICODE(world_a_tilde_upper, /* Ã */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp C &kp N3)
      #endif
    )
    world_a_tilde: world_a_tilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_ring_lower, /* å */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp E &kp N5)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N5)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_2 &kp KP_2)
      #endif
    )
    UNICODE(world_a_ring_upper, /* Å */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp C &kp N5)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N5)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_1 &kp KP_9)
      #endif
    )
    world_a_ring: world_a_ring {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_acute_lower, /* ý */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp D)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp D)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp D)
      #endif
    )
    UNICODE(world_y_acute_upper, /* Ý */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp D)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp D)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp D)
      #endif
    )
    world_y_acute: world_y_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_diaeresis_lower, /* ÿ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp F)
      #endif
    )
    UNICODE(world_y_diaeresis_upper, /* Ÿ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N1 &kp N7 &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N1 &kp N7 &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N1 &kp N7 &kp N8)
      #endif
    )
    world_y_diaeresis: world_y_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_acute_lower, /* ó */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N3)
      #endif
    )
    UNICODE(world_o_acute_upper, /* Ó */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N3)
      #endif
    )
    world_o_acute: world_o_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_diaeresis_lower, /* ö */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp O)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
      #endif
    )
    UNICODE(world_o_diaeresis_upper, /* Ö */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
      #endif
    )
    world_o_diaeresis: world_o_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_circumflex_lower, /* ô */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N4)
      #endif
    )
    UNICODE(world_o_circumflex_upper, /* Ô */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N4)
      #endif
    )
    world_o_circumflex: world_o_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_grave_lower, /* ò */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N2)
      #endif
    )
    UNICODE(world_o_grave_upper, /* Ò */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N2)
      #endif
    )
    world_o_grave: world_o_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_tilde_lower, /* õ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N5)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N5)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N5)
      #endif
    )
    UNICODE(world_o_tilde_upper, /* Õ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N5)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N5)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N5)
      #endif
    )
    world_o_tilde: world_o_tilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_slash_lower, /* ø */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_2 &kp KP_3)
      #endif
    )
    UNICODE(world_o_slash_upper, /* Ø */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp KP_PLUS &kp KP_0 &kp KP_2 &kp KP_1)
      #endif
    )
    world_o_slash: world_o_slash {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_acute_lower, /* ú */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp A)
      #endif
    )
    UNICODE(world_u_acute_upper, /* Ú */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp A)
      #endif
    )
    world_u_acute: world_u_acute {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_diaeresis_lower, /* ü */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp U)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
      #endif
    )
    UNICODE(world_u_diaeresis_upper, /* Ü */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
      #endif
    )
    world_u_diaeresis: world_u_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_circumflex_lower, /* û */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp B)
      #endif
    )
    UNICODE(world_u_circumflex_upper, /* Û */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp B)
      #endif
    )
    world_u_circumflex: world_u_circumflex {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_grave_lower, /* ù */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N9)
      #endif
    )
    UNICODE(world_u_grave_upper, /* Ù */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N9)
      #endif
    )
    world_u_grave: world_u_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_n_tilde_lower, /* ñ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp N1)
      #endif
    )
    UNICODE(world_n_tilde_upper, /* Ñ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp D &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp D &kp N1)
      #endif
    )
    world_n_tilde: world_n_tilde {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_n_tilde_lower>, <&world_n_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_angle_lower, /* ‹ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N3 &kp N9)
      #endif
    )
    UNICODE(world_quotes_left_angle_upper, /* « */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp B)
      #endif
    )
    world_quotes_left_angle: world_quotes_left_angle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_curly_lower, /* ‘ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N8)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N8)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp N8)
      #endif
    )
    UNICODE(world_quotes_left_curly_upper, /* “ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp C)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp C)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp C)
      #endif
    )
    world_quotes_left_curly: world_quotes_left_curly {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_low_lower, /* ‚ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp A)
      #endif
    )
    UNICODE(world_quotes_left_low_upper, /* „ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp E)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp E)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp E)
      #endif
    )
    world_quotes_left_low: world_quotes_left_low {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_corner1_lower, /* 「 */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp C)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp C)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp C)
      #endif
    )
    UNICODE(world_quotes_left_corner1_upper, /* ﹁ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N1)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N1)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N1)
      #endif
    )
    world_quotes_left_corner1: world_quotes_left_corner1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_corner2_lower, /* 『 */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp E)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp E)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp E)
      #endif
    )
    UNICODE(world_quotes_left_corner2_upper, /* ﹃ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N3)
      #endif
    )
    world_quotes_left_corner2: world_quotes_left_corner2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_left_grave, /* ` */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N6 &kp N0)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N6 &kp N0)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N6 &kp N0)
      #endif
    )
    UNICODE(world_quotes_right_angle_lower, /* › */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp A)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp A)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N3 &kp A)
      #endif
    )
    UNICODE(world_quotes_right_angle_upper, /* » */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp B)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp B)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp B)
      #endif
    )
    world_quotes_right_angle: world_quotes_right_angle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_curly_lower, /* ’ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp N9)
      #endif
    )
    UNICODE(world_quotes_right_curly_upper, /* ” */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp D)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp D)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp D)
      #endif
    )
    world_quotes_right_curly: world_quotes_right_curly {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
        mods = <MOD_LSFT>;
    };
    world_quotes_right_low: world_quotes_right_low {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_corner1_lower, /* 」 */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp D)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp D)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp D)
      #endif
    )
    UNICODE(world_quotes_right_corner1_upper, /* ﹂ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N2)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N2)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N2)
      #endif
    )
    world_quotes_right_corner1: world_quotes_right_corner1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_corner2_lower, /* 』 */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp F)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp F)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp F)
      #endif
    )
    UNICODE(world_quotes_right_corner2_upper, /* ﹄ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N4)
      #endif
    )
    world_quotes_right_corner2: world_quotes_right_corner2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_right_grave, /* ´ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp B &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp B &kp N4)
      #endif
    )
    UNICODE(world_currency_dollar_lower, /* $ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N4)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N2 &kp N4)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N4)
      #endif
    )
    world_currency_dollar: world_currency_dollar {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_currency_yen, /* ¥ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N5)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N5)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N5)
      #endif
    )
    UNICODE(world_currency_euro, /* € */
      #if UNICODE_TARGET_OS == 'L'
        COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
      #elif UNICODE_TARGET_OS == 'M'
        COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
      #elif UNICODE_TARGET_OS == 'W'
        COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
      #endif
    )
    UNICODE(world_currency_won, /* ₩ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp A &kp N9)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp A &kp N9)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp A &kp N9)
      #endif
    )
    UNICODE(world_currency_pound, /* £ */
      #if UNICODE_TARGET_OS == 'L'
        UNICODE_SEQ_LINUX(&kp A &kp N3)
      #elif UNICODE_TARGET_OS == 'M'
        UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N3)
      #elif UNICODE_TARGET_OS == 'W'
        UNICODE_SEQ_WINDOWS(&kp A &kp N3)
      #endif
    )
    world_currency_generic: world_currency_generic {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_sign>, <&world_currency_crypto>;
        mods = <MOD_LSFT>;
    };

    //
    // transforms
    //
    world_i_base: world_i_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_acute>, <&world_i_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_i_LCTL: world_i_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_i_RCTL: world_i_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex>, <&world_i_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_e_base: world_e_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_acute>, <&world_e_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RALT: world_e_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_ae>, <&world_e_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_LCTL: world_e_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RCTL: world_e_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex>, <&world_e_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_a_base: world_a_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_acute>, <&world_a_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LALT: world_a_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_tilde>, <&world_a_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RALT: world_a_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_ring>, <&world_a_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LCTL: world_a_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RCTL: world_a_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex>, <&world_a_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_y_base: world_y_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_y_acute>, <&world_y_diaeresis>;
        mods = <(MOD_LCTL)>;
    };
    world_o_base: world_o_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_acute>, <&world_o_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LALT: world_o_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_tilde>, <&world_o_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RALT: world_o_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_slash>, <&world_o_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LCTL: world_o_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RCTL: world_o_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex>, <&world_o_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_u_base: world_u_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_acute>, <&world_u_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_u_LCTL: world_u_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_u_RCTL: world_u_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex>, <&world_u_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_quotes_left_base: world_quotes_left_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_LALT: world_quotes_left_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_RALT: world_quotes_left_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_LCTL: world_quotes_left_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_left_RCTL: world_quotes_left_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_quotes_right_base: world_quotes_right_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_LALT: world_quotes_right_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_RALT: world_quotes_right_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_LCTL: world_quotes_right_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_right_RCTL: world_quotes_right_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_currency_base: world_currency_base {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_dollar>, <&world_currency_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_LALT: world_currency_LALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_yen>, <&world_currency_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_RALT: world_currency_RALT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_won>, <&world_currency_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_LCTL: world_currency_LCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_euro>, <&world_currency_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_currency_RCTL: world_currency_RCTL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&world_currency_pound>, <&world_currency_generic>;
        mods = <(MOD_RSFT)>;
    };
};
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
    &kp F1          &kp F2          &kp F3           &kp F4           &kp F5                                                                                                                                                &kp F6           &kp F7          &kp F8             &kp F9    &kp F10
 &kp EQUAL          &kp N1          &kp N2           &kp N3           &kp N4               &kp N5                                                                                                          &kp N6           &kp N7           &kp N8          &kp N9             &kp N0  &kp MINUS
   &kp TAB           &kp Q           &kp W            &kp E            &kp R                &kp T                                                                                                           &kp Y            &kp U            &kp I           &kp O              &kp P   &kp BSLH
   &kp ESC  &mymt (LGUI,A)  &mymt (LALT,S)  &mymt (LSHFT,D)  &mymt (LCTRL,F)  &mymt (BACKSPACE,G)                                                                                                 &mymt (SPACE,H)  &mymt (LCTRL,J)  &mymt (LSHFT,K)  &mymt (LALT,L)  &mymt (LGUI,SEMI)    &kp SQT
 &kp LSHFT           &kp Z           &kp X            &kp C            &kp V                &kp B                      &kp ESC   &kp LGUI   &to 2   &to 3  &kp GRAVE                   &kp LCTRL            &kp N            &kp M        &kp COMMA         &kp DOT           &kp FSLH  &kp LSHFT
     &to 7        &kp HOME         &kp END         &kp LALT        &sk LSHFT                       &mymomt LAYER_Symbols SPACE  &kp LCTRL   &to 6   &to 4   &kp BSPC  &mymomt LAYER_Arrows ENTER                         &sk LSHFT         &kp LALT        &kp LBKT           &kp RBKT      &to 7
            >;
        };

        layer_Symbols {
            bindings = <
 &trans  &trans    &trans    &trans     &trans                                                                         &trans     &trans    &trans  &kp F11  &kp F12
 &trans  &trans    &trans    &trans     &trans  &kp LPAR                                                  &kp RPAR     &trans     &trans    &trans   &trans   &trans
 &trans  &trans    &trans    &trans     &trans  &kp LBKT                                                  &kp RBKT     &trans     &trans    &trans   &trans   &trans
 &trans  &trans  &kp HASH  &kp FSLH  &kp CARET  &kp LBRC                                                  &kp RBRC   &kp DLLR  &kp QMARK  &kp STAR   &trans   &trans
 &trans  &trans    &trans    &trans  &kp COLON    &kp LT  &trans  &trans   &to 2   &to 3  &trans  &trans    &kp GT  &kp EQUAL     &trans    &trans   &trans   &trans
  &to 7  &trans    &trans    &trans     &trans            &trans  &trans   &to 6   &to 4  &trans  &trans               &trans     &trans    &trans   &trans    &to 7
            >;
        };

        layer_Macros {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &to 0   &to 3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &to 7  &trans  &trans  &trans  &trans          &trans  &trans   &to 6   &to 4  &trans  &trans          &trans  &trans  &trans  &trans   &to 7
            >;
        };

        layer_Unused {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &to 2   &to 0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &to 7  &trans  &trans  &trans  &trans          &trans  &trans   &to 6   &to 4  &trans  &trans          &trans  &trans  &trans  &trans   &to 7
            >;
        };

        layer_Gaming {
            bindings = <
    &trans  &trans  &trans  &trans    &trans                                                                     &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans    &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans    &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
    &trans   &kp A   &kp S   &kp D     &kp F   &kp G                                                     &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &kp LCTRL  &trans  &trans  &trans  &kp LALT          &kp SPACE  &trans  &trans   &to 0  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Arrows {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                    &trans    &trans     &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans    &trans    &trans     &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans    &trans    &kp UP     &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &to 2   &to 3  &trans  &trans  &trans    &trans    &trans     &trans  &trans  &trans
  &to 7  &trans  &trans  &trans  &trans          &trans  &trans   &to 6   &to 4  &trans  &trans            &trans    &trans     &trans  &trans   &to 7
            >;
        };

        layer_International {
            bindings = <
 &trans         &trans  &trans       &trans  &trans                                                                  &trans  &trans          &trans  &trans  &trans
 &trans         &trans  &trans       &trans  &trans  &trans                                                  &trans  &trans  &trans          &trans  &trans  &trans
 &trans         &trans  &trans  &world_e_ae  &trans  &trans                                                  &trans  &trans  &trans  &world_o_slash  &trans  &trans
 &trans  &world_a_ring  &trans       &trans  &trans  &trans                                                  &trans  &trans  &trans          &trans  &trans  &trans
 &trans         &trans  &trans       &trans  &trans  &trans  &trans  &trans   &to 2   &to 3  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans
  &to 7         &trans  &trans       &trans  &trans          &trans  &trans   &to 0   &to 4  &trans  &trans          &trans  &trans          &trans  &trans   &to 7
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none       &sys_reset                                                                                 &sys_reset   &none   &none   &none  &bt BT_CLR_ALL
       &none            &bt_1            &bt_2            &bt_3            &none            &none                                                         &none       &none   &none   &none   &bt_0           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none       &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none       &none   &none   &none   &none     &bootloader
       &none            &none            &none            &none            &none            &none         &none   &none   &to 2   &to 3   &none   &none   &none       &none   &none   &none   &none           &none
       &to 0            &none            &none            &none            &none                   &out OUT_USB   &none   &to 6   &to 4   &none   &none               &none   &none   &none   &none           &to 0
            >;
        };

    };
};
